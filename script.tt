# Determines if two bits (positions 0 and 1) are equal

start * * * l1_flag

# Load the first bit
l1_flag * !flag equal_arg1 l1
l1 * 0 > l2_flag

# Load the second bit
l2_flag * !flag equal_arg2 l1
l2 * 1 > out_flag

# Set the output flag and call the equal function
out_flag * !flag equal_return equal

# Call the equal function


# equal function
    # entry point
    equal * !goto equal_arg1 equal_check_first

    # check the value of the first bit
    equal_check_first 0 !goto equal_arg2 equal_check_second_0
    equal_check_first 1 !goto equal_arg2 equal_check_second_1

    # The first bit was 0
    equal_check_second_0 0 !goto equal_return equal_return_1
    equal_check_second_0 1 !goto equal_return equal_return_0

    # The first bit was 1
    equal_check_second_1 0 !goto equal_return equal_return_0
    equal_check_second_1 1 !goto equal_return equal_return_1

    # Return value
    equal_return_0 * 0 * ???
